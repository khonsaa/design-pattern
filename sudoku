#include <iostream>
#include <vector>
#include <iomanip>
#include <cstdlib>
#include <ctime>

// Define a struct to represent a player
struct Player {
    std::string name;
    char symbol; // You can use symbols like 'X' and 'O' for players
};

class Cell {
private:
    int value;

public:
    Cell() : value(0) {}

    void setValue(int num) {
        value = num;
    }

    int getValue() const {
        return value;
    }

    bool isEmpty() const {
        return value == 0;
    }
};

class Board {
private:
    std::vector<std::vector<Cell>> cells;

public:
    Board() {
        // Initialize the board with empty cells
        cells = std::vector<std::vector<Cell>>(9, std::vector<Cell>(9));
    }

    void printBoard() {
        std::cout << "-------------------------" << std::endl;
        for (int i = 0; i < 9; ++i) {
            if (i % 3 == 0 && i != 0)
                std::cout << "|-----------------------|" << std::endl;
            for (int j = 0; j < 9; ++j) {
                if (j % 3 == 0 && j != 0)
                    std::cout << "| ";
                if (cells[i][j].isEmpty())
                    std::cout << ". ";
                else
                    std::cout << cells[i][j].getValue() << " ";
            }
            std::cout << std::endl;
        }
        std::cout << "-------------------------" << std::endl;
    }

    bool isMoveValid(int row, int col, int num) const {
        // Check if the number conflicts with numbers in the same row, column, or 3x3 box
        for (int i = 0; i < 9; ++i) {
            if (cells[row][i].getValue() == num || cells[i][col].getValue() == num || cells[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3].getValue() == num) {
                return false;
            }
        }
        return true;
    }

    bool isBoardFull() const {
        // Check if the board is full (no more empty cells)
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (cells[i][j].isEmpty()) {
                    return false;
                }
            }
        }
        return true;
    }

    bool solveSudoku() {
        // Find an empty cell and try to fill it with a valid number
        for (int row = 0; row < 9; ++row) {
            for (int col = 0; col < 9; ++col) {
                if (cells[row][col].isEmpty()) {
                    for (int num = 1; num <= 9; ++num) {
                        if (isMoveValid(row, col, num)) {
                            cells[row][col].setValue(num);
                            if (solveSudoku()) {
                                return true;
                            }
                            cells[row][col].setValue(0); // Backtrack if unable to find a solution
                        }
                    }
                    return false; // No suitable number found, no solution possible
                }
            }
        }
        return true; // All cells filled with valid numbers
    }

    void setNumber(int row, int col, int num) {
        cells[row][col].setValue(num);
    }

    void generatePuzzle() {
        // Seed the random number generator
        std::srand(std::time(nullptr));
        
        // Generate random numbers in some cells on the board
        for (int i = 0; i < 20; ++i) { // Fill 20 cells with random numbers
            int row = std::rand() % 9;
            int col = std::rand() % 9;
            int num = std::rand() % 9 + 1; // Generate a random number between 1 and 9
            if (isMoveValid(row, col, num)) {
                cells[row][col].setValue(num);
            }
        }
    }
};

class SudokuGame {
private:
    Board board;
    std::vector<Player> players; // Vector to store players
    int currentPlayerIndex; // Index of the current player

public:
    SudokuGame(const std::vector<Player>& players) : players(players), currentPlayerIndex(0) {}

    void printCurrentBoard() {
        board.printBoard();
    }

    bool play() {
        std::cout << "Welcome to the Sudoku game!" << std::endl;
        std::cout << "Enter numbers into the empty cells (row column number)" << std::endl;

        board.generatePuzzle();

        board.printBoard();

        while (!board.isBoardFull()) {
            Player& currentPlayer = players[currentPlayerIndex];
            std::cout << currentPlayer.name << "'s turn:" << std::endl;
            int row, col, num;
            std::cout << "Enter row, column, and number (separated by space): ";
            std::cin >> row >> col >> num;

            if (row < 1 || row > 9 || col < 1 || col > 9 || num < 1 || num > 9) {
                std::cout << "Invalid input! Please enter numbers between 1 and 9 for row, column, and number." << std::endl;
                continue;
            }

            if (board.isMoveValid(row - 1, col - 1, num)) {
                board.setNumber(row - 1, col - 1, num);
                printCurrentBoard();
                currentPlayerIndex = (currentPlayerIndex + 1) % players.size(); // Move to the next player
            } else {
                std::cout << "Invalid move! Try again." << std::endl;
            }
        }

        if (board.solveSudoku()) {
            std::cout << "Congratulations! You have solved the Sudoku puzzle!" << std::endl;
            return true;
        } else {
            std::cout << "No solution found for the entered Sudoku. Please try again!" << std::endl;
            return false;
        }
    }
};

int main() {
    // Get player names or symbols
    std::string player1Name, player2Name;
    std::cout << "Enter Player 1's name: ";
    std::cin >> player1Name;
    std::cout << "Enter Player 2's name: ";
    std::cin >> player2Name;

    // Create player instances
    Player player1 = {player1Name, 'X'};
    Player player2 = {player2Name, 'O'};
    std::vector<Player> players = {player1, player2};

    // Start the game with the players
    SudokuGame game(players);
    game.play();

    return 0;
}
